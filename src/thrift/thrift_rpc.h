/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THRIFT_RPC_H
#define THRIFT_RPC_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "thrift_rpc_types.h"

/* Rpc service interface */
typedef struct _ThriftRpcIf ThriftRpcIf;  /* dummy object */

struct _ThriftRpcIfInterface
{
  GTypeInterface parent;

  gboolean (*find_closest_peers) (ThriftRpcIf *iface, GPtrArray ** _return, const GByteArray * key, GError **error);
  gboolean (*find_key) (ThriftRpcIf *iface, GByteArray ** _return, const gchar * ident, const gint64 search_key, ThriftStorageException ** err, GError **error);
  gboolean (*get_bucket_keys) (ThriftRpcIf *iface, ThriftBucketKeys ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
  gboolean (*put) (ThriftRpcIf *iface, const GByteArray * key, const GByteArray * value, GError **error);
  gboolean (*put_latest) (ThriftRpcIf *iface, const GByteArray * key, const gint64 search_key, const GByteArray * value, GError **error);
  gboolean (*add) (ThriftRpcIf *iface, const GByteArray * key, const ThriftBucketValue * value, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
  gboolean (*get) (ThriftRpcIf *iface, GByteArray ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
  gboolean (*get_latest_max) (ThriftRpcIf *iface, ThriftBucketValue ** _return, const gchar * name, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
  gboolean (*get_range) (ThriftRpcIf *iface, GPtrArray ** _return, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError **error);
};
typedef struct _ThriftRpcIfInterface ThriftRpcIfInterface;

GType thrift_rpc_if_get_type (void);
#define THRIFT_TYPE_RPC_IF (thrift_rpc_if_get_type())
#define THRIFT_RPC_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THRIFT_TYPE_RPC_IF, ThriftRpcIf))
#define THRIFT_IS_RPC_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THRIFT_TYPE_RPC_IF))
#define THRIFT_RPC_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), THRIFT_TYPE_RPC_IF, ThriftRpcIfInterface))

gboolean thrift_rpc_if_find_closest_peers (ThriftRpcIf *iface, GPtrArray ** _return, const GByteArray * key, GError **error);
gboolean thrift_rpc_if_find_key (ThriftRpcIf *iface, GByteArray ** _return, const gchar * ident, const gint64 search_key, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_if_get_bucket_keys (ThriftRpcIf *iface, ThriftBucketKeys ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_if_put (ThriftRpcIf *iface, const GByteArray * key, const GByteArray * value, GError **error);
gboolean thrift_rpc_if_put_latest (ThriftRpcIf *iface, const GByteArray * key, const gint64 search_key, const GByteArray * value, GError **error);
gboolean thrift_rpc_if_add (ThriftRpcIf *iface, const GByteArray * key, const ThriftBucketValue * value, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_if_get (ThriftRpcIf *iface, GByteArray ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_if_get_latest_max (ThriftRpcIf *iface, ThriftBucketValue ** _return, const gchar * name, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_if_get_range (ThriftRpcIf *iface, GPtrArray ** _return, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError **error);

/* Rpc service client */
struct _ThriftRpcClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _ThriftRpcClient ThriftRpcClient;

struct _ThriftRpcClientClass
{
  GObjectClass parent;
};
typedef struct _ThriftRpcClientClass ThriftRpcClientClass;

GType thrift_rpc_client_get_type (void);
#define THRIFT_TYPE_RPC_CLIENT (thrift_rpc_client_get_type())
#define THRIFT_RPC_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THRIFT_TYPE_RPC_CLIENT, ThriftRpcClient))
#define THRIFT_RPC_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), THRIFT_TYPE_RPC_CLIENT, ThriftRpcClientClass))
#define THRIFT_RPC_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THRIFT_TYPE_RPC_CLIENT))
#define THRIFT_RPC_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), THRIFT_TYPE_RPC_CLIENT))
#define THRIFT_RPC_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), THRIFT_TYPE_RPC_CLIENT, ThriftRpcClientClass))

gboolean thrift_rpc_client_find_closest_peers (ThriftRpcIf * iface, GPtrArray ** _return, const GByteArray * key, GError ** error);
gboolean thrift_rpc_client_send_find_closest_peers (ThriftRpcIf * iface, const GByteArray * key, GError ** error);
gboolean thrift_rpc_client_recv_find_closest_peers (ThriftRpcIf * iface, GPtrArray ** _return, GError ** error);
gboolean thrift_rpc_client_find_key (ThriftRpcIf * iface, GByteArray ** _return, const gchar * ident, const gint64 search_key, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_send_find_key (ThriftRpcIf * iface, const gchar * ident, const gint64 search_key, GError ** error);
gboolean thrift_rpc_client_recv_find_key (ThriftRpcIf * iface, GByteArray ** _return, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_get_bucket_keys (ThriftRpcIf * iface, ThriftBucketKeys ** _return, const GByteArray * key, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_send_get_bucket_keys (ThriftRpcIf * iface, const GByteArray * key, GError ** error);
gboolean thrift_rpc_client_recv_get_bucket_keys (ThriftRpcIf * iface, ThriftBucketKeys ** _return, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_put (ThriftRpcIf * iface, const GByteArray * key, const GByteArray * value, GError ** error);
gboolean thrift_rpc_client_send_put (ThriftRpcIf * iface, const GByteArray * key, const GByteArray * value, GError ** error);
gboolean thrift_rpc_client_recv_put (ThriftRpcIf * iface, GError ** error);
gboolean thrift_rpc_client_put_latest (ThriftRpcIf * iface, const GByteArray * key, const gint64 search_key, const GByteArray * value, GError ** error);
gboolean thrift_rpc_client_send_put_latest (ThriftRpcIf * iface, const GByteArray * key, const gint64 search_key, const GByteArray * value, GError ** error);
gboolean thrift_rpc_client_recv_put_latest (ThriftRpcIf * iface, GError ** error);
gboolean thrift_rpc_client_add (ThriftRpcIf * iface, const GByteArray * key, const ThriftBucketValue * value, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_send_add (ThriftRpcIf * iface, const GByteArray * key, const ThriftBucketValue * value, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError ** error);
gboolean thrift_rpc_client_recv_add (ThriftRpcIf * iface, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_get (ThriftRpcIf * iface, GByteArray ** _return, const GByteArray * key, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_send_get (ThriftRpcIf * iface, const GByteArray * key, GError ** error);
gboolean thrift_rpc_client_recv_get (ThriftRpcIf * iface, GByteArray ** _return, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_get_latest_max (ThriftRpcIf * iface, ThriftBucketValue ** _return, const gchar * name, const gint64 search_key_max, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_send_get_latest_max (ThriftRpcIf * iface, const gchar * name, const gint64 search_key_max, GError ** error);
gboolean thrift_rpc_client_recv_get_latest_max (ThriftRpcIf * iface, ThriftBucketValue ** _return, ThriftStorageException ** err, GError ** error);
gboolean thrift_rpc_client_get_range (ThriftRpcIf * iface, GPtrArray ** _return, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError ** error);
gboolean thrift_rpc_client_send_get_range (ThriftRpcIf * iface, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError ** error);
gboolean thrift_rpc_client_recv_get_range (ThriftRpcIf * iface, GPtrArray ** _return, GError ** error);
void rpc_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void rpc_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* Rpc handler (abstract base class) */
struct _ThriftRpcHandler
{
  GObject parent;
};
typedef struct _ThriftRpcHandler ThriftRpcHandler;

struct _ThriftRpcHandlerClass
{
  GObjectClass parent;

  gboolean (*find_closest_peers) (ThriftRpcIf *iface, GPtrArray ** _return, const GByteArray * key, GError **error);
  gboolean (*find_key) (ThriftRpcIf *iface, GByteArray ** _return, const gchar * ident, const gint64 search_key, ThriftStorageException ** err, GError **error);
  gboolean (*get_bucket_keys) (ThriftRpcIf *iface, ThriftBucketKeys ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
  gboolean (*put) (ThriftRpcIf *iface, const GByteArray * key, const GByteArray * value, GError **error);
  gboolean (*put_latest) (ThriftRpcIf *iface, const GByteArray * key, const gint64 search_key, const GByteArray * value, GError **error);
  gboolean (*add) (ThriftRpcIf *iface, const GByteArray * key, const ThriftBucketValue * value, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
  gboolean (*get) (ThriftRpcIf *iface, GByteArray ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
  gboolean (*get_latest_max) (ThriftRpcIf *iface, ThriftBucketValue ** _return, const gchar * name, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
  gboolean (*get_range) (ThriftRpcIf *iface, GPtrArray ** _return, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError **error);
};
typedef struct _ThriftRpcHandlerClass ThriftRpcHandlerClass;

GType thrift_rpc_handler_get_type (void);
#define THRIFT_TYPE_RPC_HANDLER (thrift_rpc_handler_get_type())
#define THRIFT_RPC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THRIFT_TYPE_RPC_HANDLER, ThriftRpcHandler))
#define THRIFT_IS_RPC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THRIFT_TYPE_RPC_HANDLER))
#define THRIFT_RPC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), THRIFT_TYPE_RPC_HANDLER, ThriftRpcHandlerClass))
#define THRIFT_IS_RPC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), THRIFT_TYPE_RPC_HANDLER))
#define THRIFT_RPC_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), THRIFT_TYPE_RPC_HANDLER, ThriftRpcHandlerClass))

gboolean thrift_rpc_handler_find_closest_peers (ThriftRpcIf *iface, GPtrArray ** _return, const GByteArray * key, GError **error);
gboolean thrift_rpc_handler_find_key (ThriftRpcIf *iface, GByteArray ** _return, const gchar * ident, const gint64 search_key, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_handler_get_bucket_keys (ThriftRpcIf *iface, ThriftBucketKeys ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_handler_put (ThriftRpcIf *iface, const GByteArray * key, const GByteArray * value, GError **error);
gboolean thrift_rpc_handler_put_latest (ThriftRpcIf *iface, const GByteArray * key, const gint64 search_key, const GByteArray * value, GError **error);
gboolean thrift_rpc_handler_add (ThriftRpcIf *iface, const GByteArray * key, const ThriftBucketValue * value, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_handler_get (ThriftRpcIf *iface, GByteArray ** _return, const GByteArray * key, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_handler_get_latest_max (ThriftRpcIf *iface, ThriftBucketValue ** _return, const gchar * name, const gint64 search_key_max, ThriftStorageException ** err, GError **error);
gboolean thrift_rpc_handler_get_range (ThriftRpcIf *iface, GPtrArray ** _return, const gchar * name, const gint64 search_key_min, const gint64 search_key_max, GError **error);

/* Rpc processor */
struct _ThriftRpcProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  ThriftRpcHandler *handler;
  GHashTable *process_map;
};
typedef struct _ThriftRpcProcessor ThriftRpcProcessor;

struct _ThriftRpcProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _ThriftRpcProcessorClass ThriftRpcProcessorClass;

GType thrift_rpc_processor_get_type (void);
#define THRIFT_TYPE_RPC_PROCESSOR (thrift_rpc_processor_get_type())
#define THRIFT_RPC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THRIFT_TYPE_RPC_PROCESSOR, ThriftRpcProcessor))
#define THRIFT_IS_RPC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THRIFT_TYPE_RPC_PROCESSOR))
#define THRIFT_RPC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), THRIFT_TYPE_RPC_PROCESSOR, ThriftRpcProcessorClass))
#define THRIFT_IS_RPC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), THRIFT_TYPE_RPC_PROCESSOR))
#define THRIFT_RPC_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), THRIFT_TYPE_RPC_PROCESSOR, ThriftRpcProcessorClass))

#endif /* THRIFT_RPC_H */
